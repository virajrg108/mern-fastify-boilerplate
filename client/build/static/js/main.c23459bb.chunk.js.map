{"version":3,"sources":["ColorModeSwitcher.js","withSplashScreen.js","pages/Home/Home.jsx","pages/Login/Login.jsx","history.js","App.js","serviceWorkerRegistration.js","index.js","reducers/reducer.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","withSplashScreen","WrappedComponent","state","loading","a","setTimeout","setState","err","console","log","this","className","Component","Home","gotoLogin","history","push","count","handleIncrementClick","React","connect","dispatch","type","handleDecrementClick","withRouter","Login","createBrowserHistory","theme","justifySelf","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","store","createStore","action","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c23459bb.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React, {Component} from 'react';\nimport './splash-screen.css';\n\nfunction LoadingMessage() {\n  return (\n    <div className=\"splash-screen\">\n      Wait a moment while we load your app.\n      <div className=\"loading-dot\">.</div>\n    </div>\n  );\n}\n\nfunction withSplashScreen(WrappedComponent) {\n  return class extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        loading: true,\n      };\n    }\n\n    async componentDidMount() {\n      try {\n        setTimeout(() => {\n          this.setState({\n            loading: false,\n          });\n        }, 2000)\n      } catch (err) {\n        console.log(err);\n        this.setState({\n          loading: false,\n        });\n      }\n    }\n\n    render() {\n      // while checking user session, show \"loading\" message\n      if (this.state.loading) return LoadingMessage();\n\n      // otherwise, show the desired route\n      return <WrappedComponent {...this.props} />;\n    }\n  };\n}\n\nexport default withSplashScreen;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\"\n\nconst mapStateToProps = state => {\n  return {\n    count: state\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleIncrementClick: () => dispatch({ type: 'INCREMENT' }),\n    handleDecrementClick: () => dispatch({type: 'DECREMENT'})\n  }\n};\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { history: this.props.history };\n  }\n  gotoLogin = () => {\n    this.state.history.push('/login');\n  }\n  render() {\n    return (\n      <div>Home\n        <button onClick={this.gotoLogin}>Go to login</button>\n        {this.props.count}\n        <button onClick={this.props.handleIncrementClick}>Inc</button>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Home));","import React from 'react';\n\nclass Login extends React.Component {\n  render () {\n    return (\n      <div>Login</div>\n    )\n  }\n}\n\nexport default Login;","import { createBrowserHistory } from 'history'\n\nconst history = createBrowserHistory()\nexport default history","import React from 'react';\nimport { ChakraProvider, theme } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport withSplashScreen from './withSplashScreen';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from './pages/Home/Home';\nimport Login from './pages/Login/Login';\nimport history from './history';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <ColorModeSwitcher justifySelf=\"flex-end\" />\n      <div>\n        <Router history={history}>\n          <div>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n          </div>\n        </Router>\n      </div>\n    </ChakraProvider >\n  );\n}\n\nexport default withSplashScreen(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport {countReducer} from './reducers/reducer';\n\nconst store = createStore(countReducer);\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <ColorModeScript />\n      <App />\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n","export const countReducer = function (state = 0, action) {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return state + 1;\n    case \"DECREMENT\":\n      return state - 1;\n    default:\n      return state;\n  }\n};"],"sourceRoot":""}